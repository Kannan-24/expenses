<?php

namespace App\Exports;

use Maatwebsite\Excel\Concerns\WithMultipleSheets;
use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\WithStyles;
use Maatwebsite\Excel\Concerns\WithTitle;
use Maatwebsite\Excel\Concerns\WithColumnWidths;
use Maatwebsite\Excel\Events\AfterSheet;
use Maatwebsite\Excel\Sheet;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;
use PhpOffice\PhpSpreadsheet\Style\Alignment;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use PhpOffice\PhpSpreadsheet\Style\Border;
use PhpOffice\PhpSpreadsheet\Chart\Chart;
use PhpOffice\PhpSpreadsheet\Chart\DataSeries;
use PhpOffice\PhpSpreadsheet\Chart\DataSeriesValues;
use PhpOffice\PhpSpreadsheet\Chart\PlotArea;
use PhpOffice\PhpSpreadsheet\Chart\Legend;
use PhpOffice\PhpSpreadsheet\Chart\Title;
use Illuminate\Support\Facades\Auth;
use Maatwebsite\Excel\Concerns\WithEvents;
use Maatwebsite\Excel\Concerns\WithMapping;

class TicketReportExport implements WithMultipleSheets
{
    private array $reportData;

    public function __construct(array $reportData)
    {
        $this->reportData = $reportData;
    }

    public function sheets(): array
    {
        return [
            'Executive Summary' => new TicketSummarySheet($this->reportData),
            'Ticket Details' => new TicketDetailsSheet($this->reportData),
            'Performance Analysis' => new TicketPerformanceSheet($this->reportData),
            'Trend Analysis' => new TicketTrendSheet($this->reportData),
        ];
    }
}

class TicketSummarySheet implements FromCollection, WithHeadings, WithStyles, WithTitle, WithColumnWidths, WithEvents
{
    private array $reportData;

    public function __construct(array $reportData)
    {
        $this->reportData = $reportData;
    }

    public function collection()
    {
        $summary = $this->reportData['summary'];
        $dateRange = $this->reportData['date_range'];

        return collect([
            // Report Header
            ['SUPPORT TICKET REPORT - EXECUTIVE SUMMARY'],
            ['Generated on: ' . now()->format('F d, Y H:i:s T')],
            ['Generated by: ' . Auth::user()->name],
            ['Report Period: ' . $this->getDateRangeText($dateRange)],
            [''],

            // Key Performance Indicators
            ['KEY PERFORMANCE INDICATORS'],
            ['Metric', 'Value', 'Status'],
            ['Total Tickets', $summary['total_tickets'], $this->getTicketCountStatus($summary['total_tickets'])],
            ['Open Tickets', $summary['open_tickets'], $this->getOpenTicketStatus($summary['open_tickets'])],
            ['Closed Tickets', $summary['closed_tickets'], 'Completed'],
            ['Overdue Tickets', $summary['overdue_tickets'], $this->getOverdueStatus($summary['overdue_tickets'])],
            ['Resolution Rate', number_format($summary['resolution_rate'], 1) . '%', $this->getResolutionRateStatus($summary['resolution_rate'])],
            ['Average Response Time', $this->formatHours($summary['avg_response_time_hours']), $this->getResponseTimeStatus($summary['avg_response_time_hours'])],
            ['Average Resolution Time', $this->formatHours($summary['avg_resolution_time_hours']), $this->getResolutionTimeStatus($summary['avg_resolution_time_hours'])],
            ['Customer Satisfaction', number_format($summary['avg_customer_satisfaction'], 1) . '/5.0', $this->getSatisfactionStatus($summary['avg_customer_satisfaction'])],
            ['Performance Score', number_format($summary['performance_score'], 1) . '/100', $this->getPerformanceStatus($summary['performance_score'])],
            [''],

            // Service Level Agreement Status
            ['SERVICE LEVEL AGREEMENT (SLA) STATUS'],
            ['Priority Level', 'SLA Target', 'Actual Average', 'Compliance Rate', 'Status'],
            ['Urgent (4 hours)', '4 hours', $this->getAvgResponseByPriority('urgent'), $this->getSLACompliance('urgent'), $this->getSLAStatus('urgent')],
            ['High (24 hours)', '24 hours', $this->getAvgResponseByPriority('high'), $this->getSLACompliance('high'), $this->getSLAStatus('high')],
            ['Medium (72 hours)', '72 hours', $this->getAvgResponseByPriority('medium'), $this->getSLACompliance('medium'), $this->getSLAStatus('medium')],
            ['Low (7 days)', '7 days', $this->getAvgResponseByPriority('low'), $this->getSLACompliance('low'), $this->getSLAStatus('low')],
            [''],

            // Ticket Distribution
            ['TICKET DISTRIBUTION'],
            ['Category', 'Count', 'Percentage'],
            ['By Status:', '', ''],
            ...$this->getStatusDistribution(),
            [''],
            ['By Priority:', '', ''],
            ...$this->getPriorityDistribution(),
            [''],
            ['By Category:', '', ''],
            ...$this->getCategoryDistribution(),
            [''],

            // Performance Insights
            ['PERFORMANCE INSIGHTS'],
            ['Insight Type', 'Value', 'Recommendation'],
            ['Peak Response Time', $this->getPeakResponseTime(), 'Monitor during peak hours'],
            ['Most Common Category', $this->getMostCommonCategory(), 'Focus training on this area'],
            ['Longest Open Ticket', $this->getLongestOpenTicket(), 'Prioritize resolution'],
            ['Average Messages per Ticket', number_format($summary['avg_messages_per_ticket'], 1), $this->getMessageRecommendation($summary['avg_messages_per_ticket'])],
            [''],

            // Recommendations
            ['STRATEGIC RECOMMENDATIONS'],
            ...$this->getRecommendations()
        ]);
    }

    public function headings(): array
    {
        return [];
    }

    public function title(): string
    {
        return 'Executive Summary';
    }

    public function columnWidths(): array
    {
        return [
            'A' => 25,
            'B' => 20,
            'C' => 20,
            'D' => 15,
            'E' => 15,
        ];
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => [
                'font' => ['bold' => true, 'size' => 16, 'color' => ['rgb' => '1F4E79']],
                'alignment' => ['horizontal' => Alignment::HORIZONTAL_CENTER]
            ],
            6 => [
                'font' => ['bold' => true, 'size' => 12, 'color' => ['rgb' => '2F5597']],
                'fill' => ['fillType' => Fill::FILL_SOLID, 'color' => ['rgb' => 'E7F3FF']]
            ],
            7 => [
                'font' => ['bold' => true],
                'fill' => ['fillType' => Fill::FILL_SOLID, 'color' => ['rgb' => 'D9E2F3']],
                'borders' => ['allBorders' => ['borderStyle' => Border::BORDER_THIN]]
            ],
            17 => [
                'font' => ['bold' => true, 'size' => 12, 'color' => ['rgb' => '2F5597']],
                'fill' => ['fillType' => Fill::FILL_SOLID, 'color' => ['rgb' => 'E7F3FF']]
            ],
            18 => [
                'font' => ['bold' => true],
                'fill' => ['fillType' => Fill::FILL_SOLID, 'color' => ['rgb' => 'D9E2F3']],
                'borders' => ['allBorders' => ['borderStyle' => Border::BORDER_THIN]]
            ]
        ];
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function (AfterSheet $event) {
                $sheet = $event->sheet->getDelegate();

                // Apply borders to data ranges
                $sheet->getStyle('A7:C15')->applyFromArray([
                    'borders' => ['allBorders' => ['borderStyle' => Border::BORDER_THIN]]
                ]);

                $sheet->getStyle('A18:E22')->applyFromArray([
                    'borders' => ['allBorders' => ['borderStyle' => Border::BORDER_THIN]]
                ]);

                // Add summary chart
                $this->addSummaryChart($sheet);
            },
        ];
    }

    private function addSummaryChart(Worksheet $sheet)
    {
        $summary = $this->reportData['summary'];

        // Add chart data
        $sheet->setCellValue('G1', 'Ticket Status Overview');
        $sheet->setCellValue('G2', 'Status');
        $sheet->setCellValue('H2', 'Count');
        $sheet->setCellValue('G3', 'Open');
        $sheet->setCellValue('H3', $summary['open_tickets']);
        $sheet->setCellValue('G4', 'Closed');
        $sheet->setCellValue('H4', $summary['closed_tickets']);
        $sheet->setCellValue('G5', 'Overdue');
        $sheet->setCellValue('H5', $summary['overdue_tickets']);

        // Create chart
        $categories = new DataSeriesValues(
            DataSeriesValues::DATASERIES_TYPE_STRING,
            'Executive Summary!$G$3:$G$5',
            null,
            3
        );

        $values = new DataSeriesValues(
            DataSeriesValues::DATASERIES_TYPE_NUMBER,
            'Executive Summary!$H$3:$H$5',
            null,
            3
        );

        $series = new DataSeries(
            DataSeries::TYPE_PIECHART,
            null,
            range(0, 2),
            ['Ticket Status'],
            [$categories],
            [$values]
        );

        $plotArea = new PlotArea(null, [$series]);
        $legend = new Legend(Legend::POSITION_RIGHT, null, false);
        $title = new Title('Ticket Status Distribution');

        $chart = new Chart(
            'ticketStatusChart',
            $title,
            $legend,
            $plotArea
        );

        $chart->setTopLeftPosition('G1');
        $chart->setBottomRightPosition('L10');

        $sheet->addChart($chart);
    }

    // Helper methods
    private function getDateRangeText($dateRange): string
    {
        if ($dateRange[0] && $dateRange[1]) {
            return $dateRange[0]->format('M d, Y') . ' to ' . $dateRange[1]->format('M d, Y');
        }
        return 'All Time';
    }

    private function formatHours($hours): string
    {
        if ($hours === null || $hours === 0) return 'N/A';

        if ($hours < 1) {
            return number_format($hours * 60, 0) . ' minutes';
        } elseif ($hours < 24) {
            return number_format($hours, 1) . ' hours';
        } else {
            $days = floor($hours / 24);
            $remainingHours = $hours % 24;
            return $days . ' days, ' . number_format($remainingHours, 1) . ' hours';
        }
    }

    private function getTicketCountStatus($count): string
    {
        if ($count > 100) return 'High Volume';
        if ($count > 50) return 'Moderate Volume';
        if ($count > 10) return 'Normal Volume';
        return 'Low Volume';
    }

    private function getOpenTicketStatus($count): string
    {
        if ($count > 20) return 'High Backlog';
        if ($count > 10) return 'Moderate Backlog';
        if ($count > 0) return 'Normal';
        return 'No Backlog';
    }

    private function getOverdueStatus($count): string
    {
        if ($count > 10) return 'Critical';
        if ($count > 5) return 'Warning';
        if ($count > 0) return 'Attention Needed';
        return 'Excellent';
    }

    private function getResolutionRateStatus($rate): string
    {
        if ($rate >= 90) return 'Excellent';
        if ($rate >= 80) return 'Good';
        if ($rate >= 70) return 'Fair';
        return 'Needs Improvement';
    }

    private function getResponseTimeStatus($hours): string
    {
        if ($hours <= 4) return 'Excellent';
        if ($hours <= 24) return 'Good';
        if ($hours <= 72) return 'Fair';
        return 'Needs Improvement';
    }

    private function getResolutionTimeStatus($hours): string
    {
        if ($hours <= 24) return 'Excellent';
        if ($hours <= 72) return 'Good';
        if ($hours <= 168) return 'Fair';
        return 'Needs Improvement';
    }

    private function getSatisfactionStatus($score): string
    {
        if ($score >= 4.5) return 'Excellent';
        if ($score >= 4.0) return 'Good';
        if ($score >= 3.5) return 'Fair';
        return 'Needs Improvement';
    }

    private function getPerformanceStatus($score): string
    {
        if ($score >= 90) return 'Excellent';
        if ($score >= 80) return 'Good';
        if ($score >= 70) return 'Fair';
        return 'Needs Improvement';
    }

    private function getAvgResponseByPriority($priority): string
    {
        $tickets = collect($this->reportData['tickets'])->where('priority', $priority);
        $avgResponse = $tickets->whereNotNull('first_response_time_hours')->avg('first_response_time_hours');
        return $this->formatHours($avgResponse);
    }

    private function getSLACompliance($priority): string
    {
        $slaHours = ['urgent' => 4, 'high' => 24, 'medium' => 72, 'low' => 168][$priority];
        $tickets = collect($this->reportData['tickets'])->where('priority', $priority);
        $compliantTickets = $tickets->where('first_response_time_hours', '<=', $slaHours)->count();
        $totalTickets = $tickets->count();

        if ($totalTickets === 0) return 'N/A';

        $compliance = ($compliantTickets / $totalTickets) * 100;
        return number_format($compliance, 1) . '%';
    }

    private function getSLAStatus($priority): string
    {
        $compliance = floatval(str_replace('%', '', $this->getSLACompliance($priority)));

        if ($compliance >= 95) return 'Excellent';
        if ($compliance >= 90) return 'Good';
        if ($compliance >= 80) return 'Fair';
        return 'Needs Improvement';
    }

    private function getStatusDistribution(): array
    {
        $summary = $this->reportData['summary'];
        $total = $summary['total_tickets'];

        if ($total === 0) return [['No tickets found', 0, '0%']];

        $distribution = [];
        foreach ($summary['status_breakdown'] as $status => $count) {
            $percentage = ($count / $total) * 100;
            $distribution[] = [ucfirst($status), $count, number_format($percentage, 1) . '%'];
        }

        return $distribution;
    }

    private function getPriorityDistribution(): array
    {
        $summary = $this->reportData['summary'];
        $total = $summary['total_tickets'];

        if ($total === 0) return [['No tickets found', 0, '0%']];

        $distribution = [];
        foreach ($summary['priority_breakdown'] as $priority => $count) {
            $percentage = ($count / $total) * 100;
            $distribution[] = [ucfirst($priority), $count, number_format($percentage, 1) . '%'];
        }

        return $distribution;
    }

    private function getCategoryDistribution(): array
    {
        $summary = $this->reportData['summary'];
        $total = $summary['total_tickets'];

        if ($total === 0) return [['No tickets found', 0, '0%']];

        $distribution = [];
        foreach ($summary['category_breakdown'] as $category => $count) {
            $percentage = ($count / $total) * 100;
            $distribution[] = [$category ?: 'Uncategorized', $count, number_format($percentage, 1) . '%'];
        }

        return $distribution;
    }

    private function getPeakResponseTime(): string
    {
        $tickets = collect($this->reportData['tickets']);
        $maxResponse = $tickets->max('first_response_time_hours');
        return $this->formatHours($maxResponse);
    }

    private function getMostCommonCategory(): string
    {
        $summary = $this->reportData['summary'];
        $categories = $summary['category_breakdown'];

        if (empty($categories)) return 'N/A';

        $mostCommon = array_keys($categories, max($categories))[0];
        return $mostCommon ?: 'Uncategorized';
    }

    private function getLongestOpenTicket(): string
    {
        $tickets = collect($this->reportData['tickets'])->where('status', '!=', 'closed');
        $oldest = $tickets->min('created_at');

        if (!$oldest) return 'N/A';

        $days = now()->diffInDays($oldest);
        return $days . ' days';
    }

    private function getMessageRecommendation($avgMessages): string
    {
        if ($avgMessages > 10) return 'High interaction - check process efficiency';
        if ($avgMessages > 5) return 'Moderate interaction - monitor trends';
        return 'Efficient communication';
    }

    private function getRecommendations(): array
    {
        $recommendations = [];
        $summary = $this->reportData['summary'];

        if ($summary['overdue_tickets'] > 0) {
            $recommendations[] = ['• Prioritize resolution of overdue tickets immediately'];
        }

        if ($summary['avg_response_time_hours'] > 24) {
            $recommendations[] = ['• Improve first response time with additional staff or automation'];
        }

        if ($summary['resolution_rate'] < 80) {
            $recommendations[] = ['• Focus on improving ticket resolution processes'];
        }

        if ($summary['avg_customer_satisfaction'] < 4.0) {
            $recommendations[] = ['• Implement customer satisfaction improvement initiatives'];
        }

        $recommendations[] = ['• Consider implementing automated ticket routing'];
        $recommendations[] = ['• Schedule regular team training sessions'];
        $recommendations[] = ['• Review and update SLA targets based on actual performance'];

        return $recommendations;
    }
}

class TicketDetailsSheet implements FromCollection, WithHeadings, WithMapping, WithStyles, WithTitle, WithColumnWidths
{
    private array $reportData;

    public function __construct(array $reportData)
    {
        $this->reportData = $reportData;
    }

    public function collection()
    {
        return collect($this->reportData['tickets']);
    }

    public function headings(): array
    {
        return [
            'Ticket ID',
            'Subject',
            'Status',
            'Priority',
            'Category',
            'Customer Name',
            'Customer Email',
            'Admin Assigned',
            'Created Date',
            'Last Updated',
            'Closed Date',
            'Messages Count',
            'First Response Time',
            'Resolution Time',
            'Age (Days)',
            'Is Overdue',
            'Customer Satisfaction',
            'SLA Status',
            'Last Message Date',
            'Escalation Level'
        ];
    }

    public function map($ticket): array
    {
        return [
            $ticket->id,
            $ticket->subject,
            $ticket->status_label,
            $ticket->priority_label,
            $ticket->category ?: 'Uncategorized',
            $ticket->customer->name ?? 'N/A',
            $ticket->customer->email ?? 'N/A',
            $ticket->admin->name ?? 'Unassigned',
            $ticket->created_at->format('Y-m-d H:i:s'),
            $ticket->updated_at->format('Y-m-d H:i:s'),
            $ticket->closed_at ? $ticket->closed_at->format('Y-m-d H:i:s') : 'Not Closed',
            $ticket->message_count,
            $this->formatHours($ticket->first_response_time_hours),
            $this->formatHours($ticket->resolution_time_hours),
            $ticket->age_in_days,
            $ticket->is_overdue ? 'Yes' : 'No',
            $ticket->customer_satisfaction ? number_format($ticket->customer_satisfaction, 1) . '/5.0' : 'N/A',
            $this->getSLAStatus($ticket),
            $ticket->last_message_at ? $ticket->last_message_at->format('Y-m-d H:i:s') : 'N/A',
            $this->getEscalationLevel($ticket)
        ];
    }

    public function title(): string
    {
        return 'Ticket Details';
    }

    public function columnWidths(): array
    {
        return [
            'A' => 12,  // Ticket ID
            'B' => 30,  // Subject
            'C' => 15,  // Status
            'D' => 12,  // Priority
            'E' => 15,  // Category
            'F' => 20,  // Customer Name
            'G' => 25,  // Customer Email
            'H' => 20,  // Admin Assigned
            'I' => 18,  // Created Date
            'J' => 18,  // Last Updated
            'K' => 18,  // Closed Date
            'L' => 12,  // Messages Count
            'M' => 20,  // First Response Time
            'N' => 20,  // Resolution Time
            'O' => 12,  // Age (Days)
            'P' => 12,  // Is Overdue
            'Q' => 18,  // Customer Satisfaction
            'R' => 15,  // SLA Status
            'S' => 18,  // Last Message Date
            'T' => 15,  // Escalation Level
        ];
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => [
                'font' => ['bold' => true],
                'fill' => ['fillType' => Fill::FILL_SOLID, 'color' => ['rgb' => '366092']],
                'font' => ['color' => ['rgb' => 'FFFFFF']],
                'borders' => ['allBorders' => ['borderStyle' => Border::BORDER_THIN]]
            ]
        ];
    }

    private function formatHours($hours): string
    {
        if ($hours === null || $hours === 0) return 'N/A';
        
        if ($hours < 1) {
            return number_format($hours * 60, 0) . ' minutes';
        } elseif ($hours < 24) {
            return number_format($hours, 1) . ' hours';
        } else {
            $days = floor($hours / 24);
            $remainingHours = $hours % 24;
            return $days . 'd ' . number_format($remainingHours, 1) . 'h';
        }
    }

    private function getSLAStatus($ticket): string
    {
        if ($ticket->status === 'closed') {
            return 'Met';
        }

        $slaHours = match($ticket->priority) {
            'urgent' => 4,
            'high' => 24,
            'medium' => 72,
            'low' => 168,
            default => 72
        };

        $responseTime = $ticket->first_response_time_hours;
        
        if ($responseTime === null) {
            return $ticket->is_overdue ? 'Breached' : 'Pending';
        }

        return $responseTime <= $slaHours ? 'Met' : 'Breached';
    }

    private function getEscalationLevel($ticket): string
    {
        if ($ticket->status === 'closed') {
            return 'None';
        }

        $ageHours = $ticket->age_in_days * 24;
        
        if ($ageHours > 168) { // 7 days
            return 'Level 3';
        } elseif ($ageHours > 72) { // 3 days
            return 'Level 2';
        } elseif ($ageHours > 24) { // 1 day
            return 'Level 1';
        }

        return 'None';
    }
}

    class TicketPerformanceSheet implements FromCollection, WithHeadings, WithStyles, WithTitle, WithColumnWidths
    {
        private array $reportData;
    
        public function __construct(array $reportData)
        {
            $this->reportData = $reportData;
        }
    
        public function collection()
        {
            $tickets = collect($this->reportData['tickets']);
            $summary = $this->reportData['summary'];
            
            return collect([
                // Performance Overview
                ['PERFORMANCE ANALYSIS REPORT'],
                ['Generated: ' . now()->format('F d, Y H:i:s T')],
                [''],
                
                // Response Time Analysis
                ['RESPONSE TIME ANALYSIS'],
                ['Priority Level', 'Count', 'Avg Response Time', 'SLA Target', 'Compliance Rate', 'Status'],
                ...$this->getResponseTimeAnalysis($tickets),
                [''],
                
                // Resolution Time Analysis
                ['RESOLUTION TIME ANALYSIS'],
                ['Priority Level', 'Resolved Count', 'Avg Resolution Time', 'Median Resolution Time', 'Longest Resolution', 'Status'],
                ...$this->getResolutionTimeAnalysis($tickets),
                [''],
                
                // Top Performing Categories
                ['TOP PERFORMING CATEGORIES (By Resolution Rate)'],
                ['Category', 'Total Tickets', 'Resolved Tickets', 'Resolution Rate', 'Avg Resolution Time', 'Performance'],
                ...$this->getTopPerformingCategories($tickets),
                [''],
                
                // Underperforming Areas
                ['AREAS NEEDING ATTENTION'],
                ['Area', 'Issue', 'Current Value', 'Target Value', 'Gap', 'Priority'],
                ...$this->getUnderperformingAreas($tickets, $summary),
                [''],
                
                // Customer Satisfaction Analysis
                ['CUSTOMER SATISFACTION ANALYSIS'],
                ['Priority Level', 'Avg Satisfaction', 'Sample Size', 'Satisfaction Trend', 'Recommendation'],
                ...$this->getCustomerSatisfactionAnalysis($tickets),
                [''],
                
                // Workload Distribution
                ['WORKLOAD DISTRIBUTION'],
                ['Admin Name', 'Assigned Tickets', 'Resolved Tickets', 'Avg Resolution Time', 'Performance Score'],
                ...$this->getWorkloadDistribution($tickets),
                [''],
                
                // Trend Analysis
                ['PERFORMANCE TRENDS'],
                ['Metric', 'Current Period', 'Previous Period', 'Change', 'Trend Direction'],
                ...$this->getTrendAnalysis($summary),
                [''],
                
                // Recommendations
                ['PERFORMANCE IMPROVEMENT RECOMMENDATIONS'],
                ...$this->getPerformanceRecommendations($summary, $tickets)
            ]);
        }
    
        public function headings(): array
        {
            return [];
        }
    
        public function title(): string
        {
            return 'Performance Analysis';
        }
    
        public function columnWidths(): array
        {
            return [
                'A' => 25,
                'B' => 15,
                'C' => 20,
                'D' => 15,
                'E' => 15,
                'F' => 20,
            ];
        }
    
        public function styles(Worksheet $sheet)
        {
            return [
                1 => [
                    'font' => ['bold' => true, 'size' => 16, 'color' => ['rgb' => '1F4E79']],
                    'alignment' => ['horizontal' => Alignment::HORIZONTAL_CENTER]
                ],
            4 => [
                'font' => ['bold' => true, 'size' => 12, 'color' => ['rgb' => '2F5597']],
                'fill' => ['fillType' => Fill::FILL_SOLID, 'color' => ['rgb' => 'E7F3FF']]
            ],
            5 => [
                'font' => ['bold' => true],
                'fill' => ['fillType' => Fill::FILL_SOLID, 'color' => ['rgb' => 'D9E2F3']],
                'borders' => ['allBorders' => ['borderStyle' => Border::BORDER_THIN]]
            ]
        ];
    }

    private function getResponseTimeAnalysis($tickets): array
    {
        $priorities = ['urgent', 'high', 'medium', 'low'];
        $slaTargets = ['urgent' => 4, 'high' => 24, 'medium' => 72, 'low' => 168];
        $analysis = [];
        
        foreach ($priorities as $priority) {
            $priorityTickets = $tickets->where('priority', $priority);
            $count = $priorityTickets->count();
            
            if ($count === 0) {
                $analysis[] = [ucfirst($priority), 0, 'N/A', $this->formatHours($slaTargets[$priority]), 'N/A', 'N/A'];
                continue;
            }
            
            $avgResponse = $priorityTickets->whereNotNull('first_response_time_hours')->avg('first_response_time_hours');
            $compliantTickets = $priorityTickets->where('first_response_time_hours', '<=', $slaTargets[$priority])->count();
            $complianceRate = ($compliantTickets / $count) * 100;
            
            $status = $complianceRate >= 95 ? 'Excellent' : ($complianceRate >= 90 ? 'Good' : ($complianceRate >= 80 ? 'Fair' : 'Poor'));
            
            $analysis[] = [
                ucfirst($priority),
                $count,
                $this->formatHours($avgResponse),
                $this->formatHours($slaTargets[$priority]),
                number_format($complianceRate, 1) . '%',
                $status
            ];
        }
        
        return $analysis;
    }

    private function getResolutionTimeAnalysis($tickets): array
    {
        $priorities = ['urgent', 'high', 'medium', 'low'];
        $analysis = [];
        
        foreach ($priorities as $priority) {
            $priorityTickets = $tickets->where('priority', $priority)->where('status', 'closed');
            $count = $priorityTickets->count();
            
            if ($count === 0) {
                $analysis[] = [ucfirst($priority), 0, 'N/A', 'N/A', 'N/A', 'N/A'];
                continue;
            }
            
            $resolutionTimes = $priorityTickets->pluck('resolution_time_hours');
            $avgResolution = $resolutionTimes->avg();
            $medianResolution = $this->calculateMedian($resolutionTimes);
            $longestResolution = $resolutionTimes->max();
            
            $status = $avgResolution <= 24 ? 'Excellent' : ($avgResolution <= 72 ? 'Good' : ($avgResolution <= 168 ? 'Fair' : 'Poor'));
            
            $analysis[] = [
                ucfirst($priority),
                $count,
                $this->formatHours($avgResolution),
                $this->formatHours($medianResolution),
                $this->formatHours($longestResolution),
                $status
            ];
        }
        
        return $analysis;
    }

    private function getTopPerformingCategories($tickets): array
    {
        $categories = $tickets->groupBy('category');
        $performance = [];
        
        foreach ($categories as $category => $categoryTickets) {
            $total = $categoryTickets->count();
            $resolved = $categoryTickets->where('status', 'closed')->count();
            $resolutionRate = $total > 0 ? ($resolved / $total) * 100 : 0;
            $avgResolution = $categoryTickets->where('status', 'closed')->avg('resolution_time_hours');
            
            $performanceScore = $resolutionRate >= 90 ? 'Excellent' : ($resolutionRate >= 80 ? 'Good' : ($resolutionRate >= 70 ? 'Fair' : 'Poor'));
            
            $performance[] = [
                $category ?: 'Uncategorized',
                $total,
                $resolved,
                number_format($resolutionRate, 1) . '%',
                $this->formatHours($avgResolution),
                $performanceScore
            ];
        }
        
        // Sort by resolution rate descending
        usort($performance, function($a, $b) {
            return floatval(str_replace('%', '', $b[3])) <=> floatval(str_replace('%', '', $a[3]));
        });
        
        return array_slice($performance, 0, 10); // Top 10
    }

    private function getUnderperformingAreas($tickets, $summary): array
    {
        $issues = [];
        
        if ($summary['avg_response_time_hours'] > 24) {
            $issues[] = [
                'Response Time',
                'Slow first response',
                $this->formatHours($summary['avg_response_time_hours']),
                '24 hours',
                $this->formatHours($summary['avg_response_time_hours'] - 24),
                'High'
            ];
        }
        
        if ($summary['overdue_tickets'] > 0) {
            $issues[] = [
                'Overdue Tickets',
                'SLA breaches',
                $summary['overdue_tickets'] . ' tickets',
                '0 tickets',
                $summary['overdue_tickets'] . ' tickets',
                'Critical'
            ];
        }
        
        if ($summary['resolution_rate'] < 80) {
            $issues[] = [
                'Resolution Rate',
                'Low closure rate',
                number_format($summary['resolution_rate'], 1) . '%',
                '80%',
                number_format(80 - $summary['resolution_rate'], 1) . '%',
                'Medium'
            ];
        }
        
        if ($summary['avg_customer_satisfaction'] < 4.0) {
            $issues[] = [
                'Customer Satisfaction',
                'Below target satisfaction',
                number_format($summary['avg_customer_satisfaction'], 1) . '/5.0',
                '4.0/5.0',
                number_format(4.0 - $summary['avg_customer_satisfaction'], 1) . ' points',
                'Medium'
            ];
        }
        
        return $issues;
    }

    private function getCustomerSatisfactionAnalysis($tickets): array
    {
        $priorities = ['urgent', 'high', 'medium', 'low'];
        $analysis = [];
        
        foreach ($priorities as $priority) {
            $priorityTickets = $tickets->where('priority', $priority)->whereNotNull('customer_satisfaction');
            $count = $priorityTickets->count();
            
            if ($count === 0) {
                $analysis[] = [ucfirst($priority), 'N/A', 0, 'Insufficient data', 'Gather more feedback'];
                continue;
            }
            
            $avgSatisfaction = $priorityTickets->avg('customer_satisfaction');
            $trend = $avgSatisfaction >= 4.5 ? 'Excellent' : ($avgSatisfaction >= 4.0 ? 'Good' : ($avgSatisfaction >= 3.5 ? 'Fair' : 'Poor'));
            $recommendation = $this->getSatisfactionRecommendation($avgSatisfaction);
            
            $analysis[] = [
                ucfirst($priority),
                number_format($avgSatisfaction, 1) . '/5.0',
                $count,
                $trend,
                $recommendation
            ];
        }
        
        return $analysis;
    }

    private function getWorkloadDistribution($tickets): array
    {
        $admins = $tickets->whereNotNull('admin')->groupBy('admin.name');
        $distribution = [];
        
        foreach ($admins as $adminName => $adminTickets) {
            $assigned = $adminTickets->count();
            $resolved = $adminTickets->where('status', 'closed')->count();
            $avgResolution = $adminTickets->where('status', 'closed')->avg('resolution_time_hours');
            
            $resolutionRate = $assigned > 0 ? ($resolved / $assigned) * 100 : 0;
            $performanceScore = $resolutionRate >= 90 ? 'Excellent' : ($resolutionRate >= 80 ? 'Good' : ($resolutionRate >= 70 ? 'Fair' : 'Poor'));
            
            $distribution[] = [
                $adminName,
                $assigned,
                $resolved,
                $this->formatHours($avgResolution),
                $performanceScore
            ];
        }
        
        // Sort by assigned tickets descending
        usort($distribution, function($a, $b) {
            return $b[1] <=> $a[1];
        });
        
        return $distribution;
    }

    private function getTrendAnalysis($summary): array
    {
        // Note: This would typically compare with historical data
        // For now, we'll show current metrics with placeholder comparison
        return [
            ['Total Tickets', $summary['total_tickets'], 'N/A', 'N/A', 'Monitor'],
            ['Resolution Rate', number_format($summary['resolution_rate'], 1) . '%', 'N/A', 'N/A', 'Monitor'],
            ['Avg Response Time', $this->formatHours($summary['avg_response_time_hours']), 'N/A', 'N/A', 'Monitor'],
            ['Customer Satisfaction', number_format($summary['avg_customer_satisfaction'], 1) . '/5.0', 'N/A', 'N/A', 'Monitor'],
            ['Performance Score', number_format($summary['performance_score'], 1) . '/100', 'N/A', 'N/A', 'Monitor']
        ];
    }

    private function getPerformanceRecommendations($summary, $tickets): array
    {
        $recommendations = [];
        
        if ($summary['avg_response_time_hours'] > 24) {
            $recommendations[] = ['• Implement automated ticket routing to reduce response time'];
            $recommendations[] = ['• Consider adding more support staff during peak hours'];
        }
        
        if ($summary['overdue_tickets'] > 5) {
            $recommendations[] = ['• Create escalation procedures for overdue tickets'];
            $recommendations[] = ['• Implement SLA monitoring and alerts'];
        }
        
        if ($summary['resolution_rate'] < 80) {
            $recommendations[] = ['• Review ticket classification and routing processes'];
            $recommendations[] = ['• Provide additional training for complex issue resolution'];
        }
        
        if ($summary['avg_customer_satisfaction'] < 4.0) {
            $recommendations[] = ['• Implement follow-up surveys to understand satisfaction drivers'];
            $recommendations[] = ['• Focus on communication quality and frequency'];
        }
        
        $recommendations[] = ['• Regular performance reviews with individual team members'];
        $recommendations[] = ['• Consider implementing knowledge base for common issues'];
        $recommendations[] = ['• Set up monthly performance dashboards for continuous monitoring'];
        
        return $recommendations;
    }

    // Helper methods
    private function formatHours($hours): string
    {
        if ($hours === null || $hours === 0) return 'N/A';
        
        if ($hours < 1) {
            return number_format($hours * 60, 0) . ' min';
        } elseif ($hours < 24) {
            return number_format($hours, 1) . 'h';
        } else {
            $days = floor($hours / 24);
            $remainingHours = $hours % 24;
            return $days . 'd ' . number_format($remainingHours, 1) . 'h';
        }
    }

    private function calculateMedian($values): float
    {
        $sorted = $values->sort()->values();
        $count = $sorted->count();
        
        if ($count === 0) return 0;
        
        if ($count % 2 === 0) {
            return ($sorted[$count / 2 - 1] + $sorted[$count / 2]) / 2;
        }
        
        return $sorted[floor($count / 2)];
    }

    private function getSatisfactionRecommendation($score): string
    {
        if ($score >= 4.5) return 'Maintain current quality';
        if ($score >= 4.0) return 'Minor improvements needed';
        if ($score >= 3.5) return 'Focus on communication';
        return 'Urgent improvement required';
    }
}

class TicketTrendSheet implements FromCollection, WithHeadings, WithStyles, WithTitle, WithColumnWidths, WithEvents
{
    private array $reportData;

    public function __construct(array $reportData)
    {
        $this->reportData = $reportData;
    }

    public function collection()
    {
        $summary = $this->reportData['summary'];
        $dailyCounts = $summary['daily_ticket_counts'] ?? [];
        
        return collect([
            // Trend Analysis Header
            ['TICKET TREND ANALYSIS'],
            ['Analysis Period: ' . $this->getDateRangeText()],
            ['Generated: ' . now()->format('F d, Y H:i:s T')],
            [''],
            [''],
            [''],
            
            // Daily Ticket Trends
            ['DAILY TICKET TRENDS'],
            ['Date', 'Total Created', 'Opened', 'Closed', 'Net Change'],
            ...$this->getDailyTrendData($dailyCounts),
            [''],
            [''],
            [''],
            [''],
            
            // Weekly Summary
            ['WEEKLY SUMMARY'],
            ['Week', 'Tickets Created', 'Tickets Closed', 'Resolution Rate', 'Avg Response Time'],
            ...$this->getWeeklySummary($dailyCounts),
            [''],
            [''],
            [''],
            
            // Priority Trends
            ['PRIORITY TRENDS'],
            ['Priority', 'Total Count', 'Percentage', 'Trend', 'Avg Resolution Time'],
            ...$this->getPriorityTrends(),
            [''],
            [''],
            [''],
            
            // Category Trends
            ['CATEGORY TRENDS'],
            ['Category', 'Total Count', 'Percentage', 'Growth Rate', 'Performance'],
            ...$this->getCategoryTrends(),
            [''],
            [''],
            [''],
            
            // Performance Metrics Over Time
            ['PERFORMANCE METRICS TRENDS'],
            ['Metric', 'Current Value', 'Target', 'Trend Direction', 'Status'],
            ...$this->getPerformanceMetricsTrends(),
            [''],
            
            // Forecast
            ['FORECAST & PREDICTIONS'],
            ['Metric', 'Next Week Prediction', 'Next Month Prediction', 'Confidence Level', 'Recommendation'],
            ...$this->getForecastData(),
        ]);
    }

    public function headings(): array
    {
        return [];
    }

    public function title(): string
    {
        return 'Trend Analysis';
    }

    public function columnWidths(): array
    {
        return [
            'A' => 20,
            'B' => 15,
            'C' => 15,
            'D' => 15,
            'E' => 20,
        ];
    }

    public function styles(Worksheet $sheet)
    {
        return [
            1 => [
                'font' => ['bold' => true, 'size' => 16, 'color' => ['rgb' => '1F4E79']],
                'alignment' => ['horizontal' => Alignment::HORIZONTAL_CENTER]
            ],
            7 => [
                'font' => ['bold' => true, 'size' => 12, 'color' => ['rgb' => '2F5597']],
                'fill' => ['fillType' => Fill::FILL_SOLID, 'color' => ['rgb' => 'E7F3FF']]
            ],
            8 => [
                'font' => ['bold' => true],
                'fill' => ['fillType' => Fill::FILL_SOLID, 'color' => ['rgb' => 'D9E2F3']],
                'borders' => ['allBorders' => ['borderStyle' => Border::BORDER_THIN]]
            ]
        ];
    }

    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function(AfterSheet $event) {
                $sheet = $event->sheet->getDelegate();
                
                // Add trend charts
                $this->addTrendCharts($sheet);
                
                // Apply borders to data ranges
                $this->applyDataBorders($sheet);
            },
        ];
    }

    private function addTrendCharts(Worksheet $sheet)
    {
        // Daily Trend Chart
        $this->createDailyTrendChart($sheet);
        
        // Priority Distribution Chart
        $this->createPriorityDistributionChart($sheet);
    }

    private function createDailyTrendChart(Worksheet $sheet)
    {
        $dailyCounts = $this->reportData['summary']['daily_ticket_counts'] ?? [];
        $dataCount = min(count($dailyCounts), 30); // Limit to 30 days for chart readability
        
        if ($dataCount < 2) return;
        
        // Add chart data starting from column G
        $sheet->setCellValue('G1', 'Daily Ticket Trends');
        $sheet->setCellValue('G2', 'Date');
        $sheet->setCellValue('H2', 'Created');
        $sheet->setCellValue('I2', 'Closed');
        
        for ($i = 0; $i < $dataCount; $i++) {
            $row = $i + 3;
            $data = $dailyCounts[$i];
            $sheet->setCellValue('G' . $row, $data['date']);
            $sheet->setCellValue('H' . $row, $data['count']);
            $sheet->setCellValue('I' . $row, $data['closed']);
        }
        
        // Create chart
        $categories = new DataSeriesValues(
            DataSeriesValues::DATASERIES_TYPE_STRING,
            'Trend Analysis!$G$3:$G$' . (2 + $dataCount),
            null,
            $dataCount
        );

        $createdValues = new DataSeriesValues(
            DataSeriesValues::DATASERIES_TYPE_NUMBER,
            'Trend Analysis!$H$3:$H$' . (2 + $dataCount),
            null,
            $dataCount
        );

        $closedValues = new DataSeriesValues(
            DataSeriesValues::DATASERIES_TYPE_NUMBER,
            'Trend Analysis!$I$3:$I$' . (2 + $dataCount),
            null,
            $dataCount
        );

        $series = new DataSeries(
            DataSeries::TYPE_LINECHART,
            DataSeries::GROUPING_STANDARD,
            range(0, 1),
            ['Created', 'Closed'],
            [$categories, $categories],
            [$createdValues, $closedValues]
        );

        $plotArea = new PlotArea(null, [$series]);
        $legend = new Legend(Legend::POSITION_BOTTOM, null, false);
        $title = new Title('Daily Ticket Trends');

        $chart = new Chart(
            'dailyTrendChart',
            $title,
            $legend,
            $plotArea
        );

        $chart->setTopLeftPosition('G1');
        $chart->setBottomRightPosition('M15');

        $sheet->addChart($chart);
    }

    private function createPriorityDistributionChart(Worksheet $sheet)
    {
        $summary = $this->reportData['summary'];
        $priorities = $summary['priority_breakdown'] ?? [];
        
        if (empty($priorities)) return;
        
        // Add chart data starting from column G row 20
        $sheet->setCellValue('G20', 'Priority Distribution');
        $sheet->setCellValue('G21', 'Priority');
        $sheet->setCellValue('H21', 'Count');
        
        $row = 22;
        foreach ($priorities as $priority => $count) {
            $sheet->setCellValue('G' . $row, ucfirst($priority));
            $sheet->setCellValue('H' . $row, $count);
            $row++;
        }
        
        $dataCount = count($priorities);
        
        // Create chart
        $categories = new DataSeriesValues(
            DataSeriesValues::DATASERIES_TYPE_STRING,
            'Trend Analysis!$G$22:$G$' . (21 + $dataCount),
            null,
            $dataCount
        );

        $values = new DataSeriesValues(
            DataSeriesValues::DATASERIES_TYPE_NUMBER,
            'Trend Analysis!$H$22:$H$' . (21 + $dataCount),
            null,
            $dataCount
        );

        $series = new DataSeries(
            DataSeries::TYPE_PIECHART,
            null,
            range(0, $dataCount - 1),
            ['Priority Distribution'],
            [$categories],
            [$values]
        );

        $plotArea = new PlotArea(null, [$series]);
        $legend = new Legend(Legend::POSITION_RIGHT, null, false);
        $title = new Title('Priority Distribution');

        $chart = new Chart(
            'priorityDistributionChart',
            $title,
            $legend,
            $plotArea
        );

        $chart->setTopLeftPosition('G20');
        $chart->setBottomRightPosition('M35');

        $sheet->addChart($chart);
    }

    private function applyDataBorders(Worksheet $sheet)
    {
        // Apply borders to main data sections
        $sheet->getStyle('A8:E20')->applyFromArray([
            'borders' => ['allBorders' => ['borderStyle' => Border::BORDER_THIN]]
        ]);
    }

    private function getDateRangeText(): string
    {
        $dateRange = $this->reportData['date_range'];
        if ($dateRange[0] && $dateRange[1]) {
            return $dateRange[0]->format('M d, Y') . ' to ' . $dateRange[1]->format('M d, Y');
        }
        return 'All Time';
    }

    private function getDailyTrendData($dailyCounts): array
    {
        $trends = [];
        
        foreach ($dailyCounts as $day) {
            $netChange = $day['count'] - $day['closed'];
            $trends[] = [
                $day['date'],
                $day['count'],
                $day['opened'],
                $day['closed'],
                $netChange >= 0 ? '+' . $netChange : $netChange
            ];
        }
        
        return $trends;
    }

    private function getWeeklySummary($dailyCounts): array
    {
        if (empty($dailyCounts)) {
            return [['No data available', 0, 0, '0%', 'N/A']];
        }
        
        // Group daily data into weeks
        $weeks = [];
        $currentWeek = [];
        $weekStart = null;
        
        foreach ($dailyCounts as $day) {
            $date = \Carbon\Carbon::parse($day['date']);
            
            if ($weekStart === null || $date->diffInDays($weekStart) >= 7) {
                if (!empty($currentWeek)) {
                    $weeks[] = $currentWeek;
                }
                $currentWeek = [];
                $weekStart = $date->startOfWeek();
            }
            
            $currentWeek[] = $day;
        }
        
        if (!empty($currentWeek)) {
            $weeks[] = $currentWeek;
        }
        
        $weeklySummary = [];
        foreach ($weeks as $index => $week) {
            $weekNumber = $index + 1;
            $totalCreated = array_sum(array_column($week, 'count'));
            $totalClosed = array_sum(array_column($week, 'closed'));
            $resolutionRate = $totalCreated > 0 ? ($totalClosed / $totalCreated) * 100 : 0;
            
            $weeklySummary[] = [
                'Week ' . $weekNumber,
                $totalCreated,
                $totalClosed,
                number_format($resolutionRate, 1) . '%',
                'N/A' // Would need historical response time data
            ];
        }
        
        return $weeklySummary;
    }

    private function getPriorityTrends(): array
    {
        $summary = $this->reportData['summary'];
        $priorities = $summary['priority_breakdown'] ?? [];
        $total = $summary['total_tickets'];
        
        $trends = [];
        foreach ($priorities as $priority => $count) {
            $percentage = $total > 0 ? ($count / $total) * 100 : 0;
            $avgResolution = $this->getAvgResolutionByPriority($priority);
            
            $trends[] = [
                ucfirst($priority),
                $count,
                number_format($percentage, 1) . '%',
                'Stable', // Would need historical data for actual trend
                $this->formatHours($avgResolution)
            ];
        }
        
        return $trends;
    }

    private function getCategoryTrends(): array
    {
        $summary = $this->reportData['summary'];
        $categories = $summary['category_breakdown'] ?? [];
        $total = $summary['total_tickets'];
        
        $trends = [];
        foreach ($categories as $category => $count) {
            $percentage = $total > 0 ? ($count / $total) * 100 : 0;
            $performance = $this->getCategoryPerformance($category);
            
            $trends[] = [
                $category ?: 'Uncategorized',
                $count,
                number_format($percentage, 1) . '%',
                'Stable', // Would need historical data
                $performance
            ];
        }
        
        return $trends;
    }

    private function getPerformanceMetricsTrends(): array
    {
        $summary = $this->reportData['summary'];
        
        return [
            [
                'Response Time',
                $this->formatHours($summary['avg_response_time_hours']),
                '24 hours',
                $summary['avg_response_time_hours'] <= 24 ? 'Improving' : 'Declining',
                $summary['avg_response_time_hours'] <= 24 ? 'Good' : 'Needs Attention'
            ],
            [
                'Resolution Rate',
                number_format($summary['resolution_rate'], 1) . '%',
                '80%',
                $summary['resolution_rate'] >= 80 ? 'Improving' : 'Declining',
                $summary['resolution_rate'] >= 80 ? 'Good' : 'Needs Attention'
            ],
            [
                'Customer Satisfaction',
                number_format($summary['avg_customer_satisfaction'], 1) . '/5.0',
                '4.0/5.0',
                $summary['avg_customer_satisfaction'] >= 4.0 ? 'Improving' : 'Declining',
                $summary['avg_customer_satisfaction'] >= 4.0 ? 'Good' : 'Needs Attention'
            ],
            [
                'Overdue Tickets',
                $summary['overdue_tickets'],
                '0',
                $summary['overdue_tickets'] == 0 ? 'Improving' : 'Declining',
                $summary['overdue_tickets'] == 0 ? 'Excellent' : 'Critical'
            ]
        ];
    }

    private function getForecastData(): array
    {
        $summary = $this->reportData['summary'];
        $dailyCounts = $summary['daily_ticket_counts'] ?? [];
        
        // Simple forecasting based on recent trends
        $recentDays = array_slice($dailyCounts, -7); // Last 7 days
        $avgDailyTickets = !empty($recentDays) ? array_sum(array_column($recentDays, 'count')) / count($recentDays) : 0;
        
        return [
            [
                'New Tickets',
                number_format($avgDailyTickets * 7, 0) . ' tickets',
                number_format($avgDailyTickets * 30, 0) . ' tickets',
                'Medium',
                'Monitor ticket volume trends'
            ],
            [
                'Resolution Rate',
                number_format($summary['resolution_rate'], 1) . '%',
                number_format($summary['resolution_rate'], 1) . '%',
                'High',
                'Maintain current performance'
            ],
            [
                'Response Time',
                $this->formatHours($summary['avg_response_time_hours']),
                $this->formatHours($summary['avg_response_time_hours']),
                'Medium',
                'Focus on process improvements'
            ],
            [
                'Workload',
                $summary['open_tickets'] > 20 ? 'High' : 'Normal',
                $summary['open_tickets'] > 30 ? 'Very High' : 'Manageable',
                'Medium',
                'Consider resource allocation'
            ]
        ];
    }

    // Helper methods
    private function formatHours($hours): string
    {
        if ($hours === null || $hours === 0) return 'N/A';
        
        if ($hours < 1) {
            return number_format($hours * 60, 0) . ' min';
        } elseif ($hours < 24) {
            return number_format($hours, 1) . 'h';
        } else {    
            $days = floor($hours / 24);
            $remainingHours = $hours % 24;
            return $days . 'd ' . number_format($remainingHours, 1) . 'h';
        }
    }

    private function getAvgResolutionByPriority($priority): ?float
    {
        $tickets = collect($this->reportData['tickets'])
            ->where('priority', $priority)
            ->where('status', 'closed');
            
        return $tickets->avg('resolution_time_hours');
    }

    private function getCategoryPerformance($category): string
    {
        $tickets = collect($this->reportData['tickets'])->where('category', $category);
        $total = $tickets->count();
        $resolved = $tickets->where('status', 'closed')->count();
        
        if ($total === 0) return 'N/A';
        
        $resolutionRate = ($resolved / $total) * 100;
        $avgResolutionTime = $tickets->where('status', 'closed')->avg('resolution_time_hours');
        
        // Performance score based on resolution rate and time
        if ($resolutionRate >= 90 && $avgResolutionTime <= 48) {
            return 'Excellent';
        } elseif ($resolutionRate >= 80 && $avgResolutionTime <= 72) {
            return 'Good';
        } elseif ($resolutionRate >= 70 && $avgResolutionTime <= 168) {
            return 'Fair';
        } else {
            return 'Poor';
        }
    }

    private function calculateTrendDirection($currentValue, $previousValue): string
    {
        if ($previousValue === null || $previousValue === 0) {
            return 'Stable';
        }
        
        $changePercent = (($currentValue - $previousValue) / $previousValue) * 100;
        
        if ($changePercent > 10) {
            return 'Increasing';
        } elseif ($changePercent < -10) {
            return 'Decreasing';
        } else {
            return 'Stable';
        }
    }

    private function getGrowthRate($category): string
    {
        // This would typically compare with historical data
        // For now, we'll return a placeholder
        $tickets = collect($this->reportData['tickets'])->where('category', $category);
        $count = $tickets->count();
        
        // Simple growth estimation based on ticket count
        if ($count > 50) {
            return 'High Growth';
        } elseif ($count > 20) {
            return 'Moderate Growth';
        } elseif ($count > 5) {
            return 'Stable';
        } else {
            return 'Low Activity';
        }
    }

    private function getConfidenceLevel($metric): string
    {
        // Confidence levels based on data availability and stability
        $summary = $this->reportData['summary'];
        
        switch ($metric) {
            case 'New Tickets':
                return $summary['total_tickets'] > 50 ? 'High' : 'Medium';
            case 'Resolution Rate':
                return $summary['closed_tickets'] > 20 ? 'High' : 'Medium';
            case 'Response Time':
                return $summary['total_tickets'] > 30 ? 'Medium' : 'Low';
            default:
                return 'Medium';
        }
    }

    private function calculateMonthlyForecast($weeklyAverage): float
    {
        // Simple linear projection
        return $weeklyAverage * 4.33; // Average weeks per month
    }

    private function getSeasonalityFactor(): float
    {
        // This would typically analyze historical seasonal patterns
        // For now, return a neutral factor
        return 1.0;
    }

    private function getRecommendationForMetric($metric, $value): string
    {
        switch ($metric) {
            case 'New Tickets':
                return $value > 100 ? 'Consider scaling support team' : 'Monitor volume trends';
            case 'Resolution Rate':
                $rate = floatval(str_replace('%', '', $value));
                return $rate < 80 ? 'Improve resolution processes' : 'Maintain current quality';
            case 'Response Time':
                return strpos($value, 'd') !== false ? 'Urgent: Reduce response time' : 'Focus on process improvements';
            case 'Workload':
                return $value === 'High' ? 'Consider resource reallocation' : 'Consider resource allocation';
            default:
                return 'Continue monitoring';
        }
    }
}